var exports = {
    establish_connection = async function (key) {
        return new Promise((resolve, reject) => {
            mysql = require('mysql2');
            if(!key.host || !key.username || !key.password) {
                reject({
                    err: 'required configuration options not set for mysql connection',
                    step: 'establish_connection (mysql variant)',
                    description: 'invalid configuration object provided to lazy_sql automated step',
                    resolution: `please provide supported value for ${!key.host ? 'host' : ''} ${!key.username ? 'username' : ''}
                    ${!key.password ? 'password' : ''} in configuration object, additional details can be found in the documentation`
                })
            }
                pool = mysql.createPool({
                    host: key.host,
                    user: key.username,
                    password: key.password,
                    waitForConnections: true,
                    connectionLimit: 20,
                    queueLimit: 0
                })
                resolve(pool)
        })
    },
    run_query = async function (pool, sql_query, repeat_number, max_repeat) {
            return new Promise(async (resolve, reject) => {
                // Automatically retry each query up to 25 times before erroring out
                if(!max_repeat) {max_repeat = 25}
                pool.getConnection(function(err, conn) {
                    if (err) {
                        reject({
                            err: 'mysql connection errored',
                            step: 'establish_connection (mysql variant)',
                            description: err,
                            resolution: `please check your SQL server authentication details and SQL server firewall`
                        })
                    }
                    conn.query(sql_query, async function (err, results) {
                        if (err) {
                            if(repeat_number) {repeat_number = repeat_number + 1}
                            else {repeat_number = 1}
                            if (repeat_number < max_repeat) {
                                /*
                                var nested_query = await query(pool, sql_query, count)
                                if(!nested_query.err) {resolve ({err: nested_query.err, 
                                results: nested_query.results
                                })}
                                */
                            } else {
                                conn.release()
                                console.log(sql_query.substring(0,50) + '... errored ' + count + ' times')
                                reject({
                                    err: 'mysql query errored',
                                    step: 'run_query (mysql variant)',
                                    description: sql_query.substring(0,50) + '... errored ' + count + ' times',
                                    resolution: `please check this query as an invalid query may have been passed. If this query was generated by the Lazy_SQL module, 
                                    please raise a bug report on https://github.com/walterchoi/Lazy_SQL/issues`
                                })
                            }
                        } else {
                            if(count > 0) {
                                console.log(sql_query.substring(0,50) + '... errored ' + count + ' times but completed successfully')
                            }
                            conn.release()
                            resolve({
                                results: results
                            })
                        }
                    })
                })
            })
    },
    check_database_exists = function (database) {
        var sql_query_part = ""
        // Handle multiple databases being provided as an array
        if(database.isArray) {
            for (var d = 0; d < database.length; d++) {
                sql_query_part = sql_query_part +
                "(CASE WHEN EXISTS (SELECT NULL FROM INFORMATION_SCHEMA.`TABLES` WHERE TABLE_SCHEMA = '" + database[d] + "') THEN 1 ELSE 0 END) AS '" + database[d] + "'"
                if(d != database.length - 1) {sql_query_part = sql_query_part + ', '}
                else {sql_query_part = sql_query_part + ' '}
            }
        } else {
            // Handle multiple databases being provided
            sql_query_part = 
            "(CASE WHEN EXISTS (SELECT NULL FROM INFORMATION_SCHEMA.`TABLES` WHERE TABLE_SCHEMA = '" + database + "') THEN 1 ELSE 0 END) AS '" + database + "' "
        }
        
        var sql_query = "SELECT " + sql_query_part + "FROM DUAL;"
        return (sql_query)
    },
    create_database = function (database) {
        var sql_query = "CREATE DATABASE " + database + ";"
        return(sql_query)
    },
    check_tables_exists = function (database, table) {
        var sql_query_part = ""
        // Handle multiple tables being provided as an array
        if(table.isArray) {
            for (var t = 0; t < table.length; t++) {
                sql_query_part = sql_query_part +
                "(CASE WHEN EXISTS (SELECT NULL FROM INFORMATION_SCHEMA.`TABLES` WHERE TABLE_SCHEMA = '" + database + "' AND TABLE_NAME = '" + table[t] + "') THEN 1 ELSE 0 END) AS '" + table[t] + "'"
                if(t != tables.length - 1) {sql_query_part = sql_query_part + ', '}
                else {sql_query_part = sql_query_part + ' '}
            }
        } else {
            // Handle multiple tables being provided
            sql_query_part = 
            "(CASE WHEN EXISTS (SELECT NULL FROM INFORMATION_SCHEMA.`TABLES` WHERE TABLE_SCHEMA = '" + database + "' AND TABLE_NAME = '" + table + "') THEN 1 ELSE 0 END) AS '" + table + "' "
        }
        
        var sql_query = "SELECT " + sql_query_part + "FROM DUAL;"
        return (sql_query)
    },
    create_table : function (database, table, meta_data, override) {
        var create_table_sql = "CREATE TABLE IF NOT EXISTS " + database + ".`" + table + "` (\n"

        // Get each column's data and repeat for each meta_data row
        for (var i = 0; i < meta_data.length; i++) {
            var column_data = meta_data[i]
            for (column in column_data) {
                var index = ''
                if(column == 'id' && !override) {var primary = " PRIMARY KEY "}
                else {var primary = ""}
                var type = column_data[column]["type"]
                var length = column_data[column]["length"]
                var allowNull = column_data[column]["allowNull"]
                var unique = column_data[column]["unique"]
                if(override) {
                    if((override.type)[column]) {type = (override.type)[column]}
                    if((override.length)[column]) {
                        if(length < (override.length)[column]) {length = (override.length)[column]}
                    }
                }
                if(unique === true && !override && length < 200 && length > 0 && type != 'date' && type != 'datetime') {
                    var unique_sql = " UNIQUE "
                } else {
                    var unique_sql = ""
                }
                if(allowNull === true) {
                    var null_sql = " NULL "
                } else {
                    var null_sql = " NOT NULL "
                }
                var length_brackets = true
                if(type == 'decimal') {var new_type = 'FLOAT'}
                if(type == 'integer') {var new_type = 'INT'}
                if(type == 'string') {var new_type = 'VARCHAR'}
                if(length > 20000) {
                    new_type = 'LONGTEXT'
                    length_brackets = false
                    length = null
                }
                if(length > 5000) {
                    new_type = 'MEDIUMTEXT'
                    length_brackets = false
                    length = null
                }
                if(length > 2000) {
                    new_type = 'TEXT'
                    length_brackets = false
                    length = null
                }
                if(type == 'json') {
                    var new_type = 'VARCHAR'
                    length_brackets = true
                }
                if(type == 'date') {
                    var new_type = 'DATE'
                    length_brackets = false
                    index = ', INDEX (`' + column + '`) '
                }
                if(type == 'datetime') {
                    var new_type = 'DATETIME'
                    length_brackets = false
                    index = ', INDEX (`' + column + '`) '
                }
                if(type == 'binary') {var new_type = 'binary'}
                if(type == 'binary' && length > 155) {
                    var new_type = 'TEXT'
                    length_brackets = false
                    length = null
                }
                if(type == 'boolean') {var new_type = 'tinyint'}
                if(length_brackets) {
                    var column_sql = "`" + column + "` " + new_type + "(" + length + ")" + null_sql +  primary + unique_sql + index
                } else {
                    var column_sql = "`" + column + "` " + new_type + null_sql + primary + unique_sql + index
                }
                create_table_sql = create_table_sql + column_sql
                if (i != meta_data.length -1) {
                    create_table_sql = create_table_sql + ", \n"
                }
            }
        }
        if (override) {
            for (var i = 0; i < override.unique.length; i++) {
                create_table_sql = create_table_sql + ", UNIQUE(`" + override.unique[i] + "`)"
            }
            if (override.primary_key.length > 0) {
                var prim_sql = ", PRIMARY KEY ("
                for (var i = 0; i < override.primary_key.length; i++) {
                    prim_sql = prim_sql + "`" + override.primary_key[i] + "`"
                    if(i != override.primary_key.length-1) {prim_sql = prim_sql + ", "}
                }
                prim_sql = prim_sql + ")"
                create_table_sql = create_table_sql + prim_sql
            }
        }
        create_table_sql = create_table_sql + ")"
        return (create_table_sql) 
    },
    get_table_description = function (database, table) {
        var sql_query = "SELECT COLUMN_NAME, DATA_TYPE, " +
        "CASE WHEN NUMERIC_PRECISION IS NOT NULL AND NUMERIC_SCALE IS NOT NULL THEN CONCAT(NUMERIC_PRECISION,',',NUMERIC_SCALE) " +
        "WHEN NUMERIC_PRECISION IS NOT NULL AND NUMERIC_SCALE IS NULL THEN NUMERIC_PRECISION " + 
        "WHEN CHARACTER_MAXIMUM_LENGTH IS NOT NULL THEN CHARACTER_MAXIMUM_LENGTH ELSE NULL END AS LENGTH, " + 
        "IS_NULLABLE, COLUMN_KEY " +
        "FROM INFORMATION_SCHEMA.COLUMNS " + 
        "WHERE TABLE_SCHEMA = '" + database + "' " +
        "AND TABLE_NAME = '" + table + "';"
        return(sql_query)
    }
}

            module.exports = {
                exports
            }