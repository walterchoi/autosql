import { DB_CONFIG, Database } from "./utils/testConfig";
import { ColumnDefinition } from "../src/helpers/metadata";

const TEST_TABLE_NAME = "test_table";

const TEST_COLUMNS: ColumnDefinition[] = [
    { type: "int", length: 11, primary: true, autoIncrement: true },
    { type: "varchar", length: 255, allowNull: false, unique: true },
    { type: "boolean", allowNull: false, default: false }
];

Object.values(DB_CONFIG).forEach((config) => {
    describe(`Create Table Query Tests for ${config.sql_dialect.toUpperCase()}`, () => {
        let db: Database;

        beforeAll(() => {
            db = Database.create(config);
        });

        test("Generate valid CREATE TABLE query", async () => {
            const query = db.createTableQuery(TEST_TABLE_NAME, TEST_COLUMNS);
            expect(typeof query).toBe("string");
            expect(query.toLowerCase()).toContain(`create table`);
            expect(query.toLowerCase()).toContain(TEST_TABLE_NAME.toLowerCase());
        });

        test("Ensure query contains all column definitions", async () => {
            const query = db.createTableQuery(TEST_TABLE_NAME, TEST_COLUMNS);
            expect(query).toContain("int");
            expect(query).toContain("varchar(255)");
            expect(query).toContain("boolean");
        });

        if (config.sql_dialect === "mysql") {
            test("Check MySQL-specific query format", async () => {
                const query = db.createTableQuery(TEST_TABLE_NAME, TEST_COLUMNS);
                expect(query).toContain("AUTO_INCREMENT");
                expect(query).toContain("ENGINE=InnoDB");
                expect(query).toContain("PRIMARY KEY");
            });
        } else if (config.sql_dialect === "pgsql") {
            test("Check PostgreSQL-specific query format", async () => {
                const query = db.createTableQuery(TEST_TABLE_NAME, TEST_COLUMNS);
                expect(query).toContain("GENERATED BY DEFAULT AS IDENTITY");
                expect(query).toContain("PRIMARY KEY");
                expect(query).toContain(`"${TEST_TABLE_NAME}"`);
            });
        }
    });
});

Object.values(DB_CONFIG).forEach((config) => {
    describe(`Validate Create Table Query Tests for ${config.sql_dialect.toUpperCase()}`, () => {
        let db: Database;

        beforeAll(async () => {
            db = Database.create(config);
            await db.establishConnection();
        });

        afterAll(async () => {
            const closeResult = await db.closeConnection();
            expect(closeResult.success).toBe(true);
        });

        test('Valid query passes testQuery without errors', async () => {
            const query = db.createTableQuery(TEST_TABLE_NAME, TEST_COLUMNS);
            console.log(query)
            await expect(db.testQuery(query)).resolves.not.toThrow();
        });
    });
});